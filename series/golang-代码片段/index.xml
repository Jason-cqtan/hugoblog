<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Golang 代码片段 on Jason Tan's blog</title><link>https://betterme.xin/series/golang-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link><description>Recent content in Golang 代码片段 on Jason Tan's blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>uniqueacheng@gmail.com (Jason Tan)</managingEditor><webMaster>uniqueacheng@gmail.com (Jason Tan)</webMaster><copyright>©2019-2021, All Rights Reserved</copyright><lastBuildDate>Thu, 25 Nov 2021 14:49:07 +0800</lastBuildDate><atom:link href="https://betterme.xin/series/golang-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/index.xml" rel="self" type="application/rss+xml"/><item><title>Go语言方法和接收器</title><link>https://betterme.xin/posts/2021-11/go-receivers-interface/</link><pubDate>Thu, 25 Nov 2021 14:49:07 +0800</pubDate><author>uniqueacheng@gmail.com (Jason Tan)</author><atom:modified>Thu, 25 Nov 2021 15:10:29 +0800</atom:modified><guid>https://betterme.xin/posts/2021-11/go-receivers-interface/</guid><description>函数式方法 1 2 3 func 函数名(参数列表) (返回参数) { // 函数体 } 函数一经定义都可被调用，无指定作用对象，无归属感 “类”方法 比较项 面向对象类 go中</description><dc:creator>Jason Tan</dc:creator><media:content url="https://betterme.xin/image/cover/go-logo-blue.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>Go</category><category>开发</category><category>Golang 代码片段</category></item><item><title>巧记go关键词</title><link>https://betterme.xin/posts/2021-09/gokeywords/</link><pubDate>Tue, 28 Sep 2021 09:24:40 +0800</pubDate><author>uniqueacheng@gmail.com (Jason Tan)</author><atom:modified>Tue, 28 Sep 2021 09:37:38 +0800</atom:modified><guid>https://betterme.xin/posts/2021-09/gokeywords/</guid><description>按照go文件从上往下和相关性记忆 package import var const type struct map interface func return go defer if else goto switch case defalut fallthrough for range continue break select chan package和import 用于分包和导入 var和cons</description><dc:creator>Jason Tan</dc:creator><media:content url="https://betterme.xin/image/cover/go-logo-blue.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>Go</category><category>开发</category><category>Golang 代码片段</category></item><item><title>字符串拼接</title><link>https://betterme.xin/posts/2021-05/go-snippets_01/</link><pubDate>Tue, 25 May 2021 19:54:18 +0800</pubDate><author>uniqueacheng@gmail.com (Jason Tan)</author><atom:modified>Tue, 22 Jun 2021 17:32:24 +0800</atom:modified><guid>https://betterme.xin/posts/2021-05/go-snippets_01/</guid><description>1 str := &amp;#34;&amp;#34; 方法一：使用+ 1 str = &amp;#34;hello&amp;#34; + &amp;#34; world!&amp;#34; 方法二：使用fmt包Sprintf方法 1 str = fmt.Sprintf(&amp;#34;abc%d&amp;#34;, 123) 方法三：使用string包Join方法 1 str = strings.Join([]string{&amp;#34;123&amp;#34;, &amp;#34;456&amp;#34;}, &amp;#34;&amp;#34;) 方法四</description><dc:creator>Jason Tan</dc:creator><media:content url="https://betterme.xin/image/cover/go-logo-blue.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>Go</category><category>开发</category><category>Golang 代码片段</category></item></channel></rss>